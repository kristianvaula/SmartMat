image: maven:3.8.5-openjdk-18
services:
  - docker:20.10-dind
#####################################################################################################################
# This template will build and test your project
# * It caches downloaded dependencies and plugins between invocation.
# * NOTE: there is NO deployment of created artifacts in this case, because every student doesn't have an own server/VM,
#   and to the best of my knowledge, there is no Docker repository running at IDI (yet) for us to use.
#####################################################################################################################
variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  SPRING_PROFILES_ACTIVE: gitlab-ci # NB!! THIS ONE'S IMPORTANT!
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
stages:
  - test_backend
  - package_backend
  - test_frontend
  - build_frontend
  
test_backend:
  stage: test_backend
  script:
    - mvn -f backend/pom.xml clean test
    - mvn -f backend/pom.xml jacoco:report
  artifacts:
    when: always
    paths:
      - target/site/jacoco
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
        - target/failsafe-reports/TEST-*.xml
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "dev"'
      changes:
        - backend/**/*
package_backend:
  stage: package_backend
  script:
    - mvn -f backend/pom.xml -DskipTests package
  artifacts:
    paths:
      - target/*.jar
      - target/site/jacoco/
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "dev"'
      changes:
        - backend/**/*
  after_script:
    - mvn -f backend/pom.xml jacoco:report
    - mvn -f backend/pom.xml jacoco:report-aggregate
test_frontend:
  stage: test_frontend
  image: node:latest
  script:
    - cd frontend
    - npm ci
    - npm run vitest
  artifacts:
    when: always
    paths:
      - coverage/
    reports:
      junit: coverage/junit.xml
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "dev"'
      changes:
        - frontend/**/*
build_frontend:
  stage: build_frontend
  image: node:latest
  script:
    - cd frontend
    - npm ci
    - npm run build
  artifacts:
    paths:
      - dist/
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "dev"'
      changes:
        - frontend/**/*

